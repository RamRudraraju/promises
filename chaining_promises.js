function calculateSquare(number){

    const promise = new Promise(function(resolve, reject){
       // Async action was generated by setTimeout Function.
       setTimeout(function() {
          if(typeof number !== 'number'){
             reject(new Error('Arg of type number is expected'));
          }
          const result = number * number;
          resolve(result);
       }, 1000 );
    });
 
    return promise;
 }

// We can Chain promises due to the fact that .then method can return a promise.
// In the following code: Prmise was invoked 4 times.
 calculateSquare(1)
    .then(value => {
        console.log(value);
        return calculateSquare(2);
    })
    .then(value1 => {
         console.log(value1);
    }, reason1 => {
        console.log("Error Happed 2: ", reason1);
    });

    console.log("-----");

    calculateSquare(1)
    .then(value => {
        console.log(value);
        return calculateSquare("string");
    })
    .then(value2 => {
         console.log(value2);
    }, reason2 => {
        console.log("Error Happed 2: ", reason2);
    });






